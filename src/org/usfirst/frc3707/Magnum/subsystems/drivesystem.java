// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.Magnum.subsystems;

import org.usfirst.frc3707.Magnum.Robot;
import org.usfirst.frc3707.Magnum.RobotMap;
import org.usfirst.frc3707.Magnum.commands.*;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;


/**
 *
 */
public class drivesystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftController = RobotMap.drivesystemLeftController;
    private final SpeedController rightController = RobotMap.drivesystemRightController;
    private final RobotDrive robotDrive2 = RobotMap.drivesystemRobotDrive2;
    private final Servo leftShiftServo = RobotMap.drivesystemLeftShiftServo;
    private final Servo rightShiftServo = RobotMap.drivesystemRightShiftServo;
    private final Encoder leftEncoder = RobotMap.drivesystemLeftEncoder;
    private final Encoder rightEncoder = RobotMap.drivesystemRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void tankdrive(double leftcontrollerspeed, double rightControllerspeed) {
    	robotDrive2.tankDrive(leftcontrollerspeed, rightControllerspeed);
    }    
    public void arcadedrive(double leftcontrollerspeed, double rightControllerspeed) {
    	robotDrive2.arcadeDrive(leftcontrollerspeed, rightControllerspeed);
    }
    public void stop() {
    	tankdrive(0,0);
    }
    public void joystickDrive () {
    	tankdrive(Robot.oi.joystickLeft.getAxis(Joystick.AxisType.kY), Robot.oi.joystickRight.getAxis(Joystick.AxisType.kY));
    }
    public void xboxDrive () {
    	arcadedrive(Robot.oi.joystickLeft.getRawAxis(1), Robot.oi.joystickLeft.getRawAxis(4));
    }
    public void shiftHigh () {
    	leftShiftServo.setPosition(0.33);
    	rightShiftServo.setPosition(0.33);
    }
    public void shiftLow () {
    	leftShiftServo.setPosition(0.66);
    	rightShiftServo.setPosition(0.66);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new xboxDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

